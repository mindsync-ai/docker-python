#!/bin/bash
set -e

usage() {
cat << EOF
Usage: "${0}" [OPTIONS] [-]
Push image to DockerHub.

Use dash to designate hub password is supplied by stdin.

Options:
    --noavx			Push the image without AVX support.
    --minimal       Push minimal image allowing editing notebooks.
    --stage         Build and push as stage image.
    --build-num     Build number to include into verseion number of the target image.
                    If not specified no version included (default: '')
    --build-ver     Build image version (default: 0.1)
    -h, --help      Print help message.
EOF
}

IMAGE_NAME='mindsync/python'
IMAGE_TAG='gpu-p37-cu11'
PASSWD_FROM_STDIN=0
TAG_SUFFIX=''
BUILD_VERSION='0.1'
BUILD_NUMBER=''
MINIMAL=
STAGE=0

while :; do
    case "$1" in 
        -h|--help)
            usage
            exit
            ;;
        --minimal)
            MINIMAL='1'
            ;;
        --noavx)
            IMAGE_TAG='gpu-p37-cu11-noavx'
            ;;
        --stage)
            STAGE=1
            ;;
        --build-ver)
            shift
            BUILD_VERSION="${1}"
            ;;
        --build-num)
            shift
            BUILD_NUMBER="${1}"
            ;;
        -?*)
            usage
            printf 'ERROR: Unknown option: %s\n' "$1" >&2
            exit 1
            ;;
        -)
            PASSWD_FROM_STDIN=1
            ;;
        *)            
            break
    esac

    shift
done

set -ex

make_build_ver() {
    echo -n "${1}.${2}-"
}

if [ -n "${BUILD_NUMBER}" ]; then
    IMAGE_VERSION="$(make_build_ver "${BUILD_VERSION}" "${BUILD_NUMBER}")"
else
    IMAGE_VERSION=''
fi

DOCKER_USERNAME=${DOCKER_USERNAME:-"mindsync"}

if [ "${PASSWD_FROM_STDIN}" -eq 0 ]; then
    docker login -u "${DOCKER_USERNAME}" docker.io
else
    read PASSWD
    echo ${PASSWD} | docker login -u "${DOCKER_USERNAME}" docker.io --password-stdin
fi

if [ -n "${MINIMAL}" ]; then
    MINIMAL_IMAGE_NAME="${IMAGE_NAME}:${IMAGE_VERSION}minimal"
    docker tag "${MINIMAL_IMAGE_NAME}" "${IMAGE_NAME}:latest-minimal"
    docker push "${MINIMAL_IMAGE_NAME}"
    docker push "${IMAGE_NAME}:latest-minimal"
    echo Done
    exit 0
fi 

SOURCE_IMAGE="${IMAGE_NAME}:${IMAGE_VERSION}${IMAGE_TAG}"

if [ "${STAGE}" -ne 0 ]; then
    if [ "$(echo ${IMAGE_TAG} | grep "noavx")" == "" ]; then
        docker tag "${SOURCE_IMAGE}" "${IMAGE_NAME}:latest-stage"
        docker push "${IMAGE_NAME}:latest-stage"
    else
        docker tag "${SOURCE_IMAGE}" "${IMAGE_NAME}:latest-stage-noavx"
        docker push "${IMAGE_NAME}:latest-stage-noavx"
    fi

    echo Done
    exit 0
fi

docker tag "${SOURCE_IMAGE}" "${IMAGE_NAME}:latest-${IMAGE_TAG}"
docker push "${SOURCE_IMAGE}"
docker push "${IMAGE_NAME}:latest-${IMAGE_TAG}"

if [ "$(echo ${IMAGE_TAG} | grep "noavx")" == "" ]; then
    docker tag "${SOURCE_IMAGE}" "${IMAGE_NAME}:latest"
    docker push "${IMAGE_NAME}:latest"
    docker push "${IMAGE_NAME}:latest-vastai"
else
    docker tag "${SOURCE_IMAGE}" "${IMAGE_NAME}:latest-noavx"
    docker push "${IMAGE_NAME}:latest-noavx"
    docker push "${IMAGE_NAME}:latest-vastai-noavx"
fi

echo Done
