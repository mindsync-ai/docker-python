#!/bin/bash
set -e

usage() {
cat << EOF
Usage: "${0}" [OPTIONS]
Build Mindsync Docker Python images.

Options:
    -c, --use-cache Use layer cache when building a new image.
    --noavx         Build jupyter image with tensorflow having no AVX support.
    --minimal       Build minimal image allowing editing notebooks.
    --build-num     Build number to include into verseion number of the target image.
                    If not specified no version included (default: '')
    --build-ver     Build image version (default: 0.1)
    -h, --help      Print help message.
EOF
}

CACHE_FLAG='--no-cache'
IMAGE_NAME='mindsync/python'
IMAGE_TAG='gpu-p37-cu11'
DOCKERFILE="Dockerfile"
BUILD_VERSION='0.1'
BUILD_NUMBER=''
MINIMAL=

while :; do
    case "$1" in 
        --noavx)
            IMAGE_TAG='gpu-p37-cu11-noavx'
            DOCKERFILE='Dockerfile-noavx'
            ;;
        --minimal)
            MINIMAL='1'
            ;;
        -h|--help)
            usage
            exit
            ;;
        -c|--use-cache)
            CACHE_FLAG=''
            ;;
        --build-ver)
            shift
            BUILD_VERSION="${1}"
            ;;
        --build-num)
            shift
            BUILD_NUMBER="${1}"
            ;;
        -?*)
            usage
            printf 'ERROR: Unknown option: %s\n' "$1" >&2
            exit 1
            ;;
        *)
            break
    esac

    shift
done

make_build_ver() {
    echo -n "${1}.${2}-"
}

set -ex

if [ -n "${BUILD_NUMBER}" ]; then
    IMAGE_VERSION="$(make_build_ver "${BUILD_VERSION}" "${BUILD_NUMBER}")"
else
    IMAGE_VERSION=''
fi

readonly CACHE_FLAG
readonly IMAGE_TAG

CACHE="${HOME}/.build/build-version"

if [ -n "${MINIMAL}" ]; then
    docker build -t "${IMAGE_NAME}:${IMAGE_VERSION}minimal" -f "Dockerfile-minimal" .
    exit 0
fi 

if [ -n "${TRAVIS}" ] && [ -f "${CACHE}" ]; then
     . "${CACHE}"
    FULL_IMAGE_NAME="${IMAGE_NAME}:${PREV_BUILD_VERSION}${IMAGE_TAG}"
    docker pull "${FULL_IMAGE_NAME}" || true
    docker build --rm --pull --cache-from "${FULL_IMAGE_NAME}" ${CACHE_FLAG} -t "${IMAGE_NAME}:${IMAGE_VERSION}${IMAGE_TAG}" -f "${DOCKERFILE}" .
else
    docker build --rm --pull ${CACHE_FLAG} -t "${IMAGE_NAME}:${IMAGE_VERSION}${IMAGE_TAG}" -f "${DOCKERFILE}" .
fi
